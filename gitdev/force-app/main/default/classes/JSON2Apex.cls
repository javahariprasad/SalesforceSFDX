//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex {

	public class SentenceCharge {
		public String ChargeID {get;set;} 
		public String ChargeNumber {get;set;} 

		public SentenceCharge(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ChargeID') {
							ChargeID = parser.getText();
						} else if (text == 'ChargeNumber') {
							ChargeNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SentenceCharge consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public String AddressLine1 {get;set;} 
		public String City {get;set;} 
		public String State {get;set;} 
		public String Zip {get;set;} 
		public String IsCurrent {get;set;} 
		public String IsCorrespondence {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AddressLine1') {
							AddressLine1 = parser.getText();
						} else if (text == 'City') {
							City = parser.getText();
						} else if (text == 'State') {
							State = parser.getText();
						} else if (text == 'Zip') {
							Zip = parser.getText();
						} else if (text == 'IsCurrent') {
							IsCurrent = parser.getText();
						} else if (text == 'IsCorrespondence') {
							IsCorrespondence = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Dispositions {
		public Disposition Disposition {get;set;} 

		public Dispositions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Disposition') {
							Disposition = new Disposition(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Dispositions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Gender {
		public String GenderCode {get;set;} 
		public String GenderDescription {get;set;} 

		public Gender(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'GenderCode') {
							GenderCode = parser.getText();
						} else if (text == 'GenderDescription') {
							GenderDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Gender consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CAProbationComponent {
		public String DispositionComponentInstanceID {get;set;} 
		public String TypeCode {get;set;} 
		public String TypeDescription {get;set;} 
		public TermDuration_Z TermDuration {get;set;} 
		public String ExcludeTollingDays {get;set;} 
		public String ImpositionOfSentenceSuspended {get;set;} 
		public ProbationStatuses ProbationStatuses {get;set;} 
		public List<ProbationConditions> ProbationConditions {get;set;} 

		public CAProbationComponent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DispositionComponentInstanceID') {
							DispositionComponentInstanceID = parser.getText();
						} else if (text == 'TypeCode') {
							TypeCode = parser.getText();
						} else if (text == 'TypeDescription') {
							TypeDescription = parser.getText();
						} else if (text == 'TermDuration') {
							TermDuration = new TermDuration_Z(parser);
						} else if (text == 'ExcludeTollingDays') {
							ExcludeTollingDays = parser.getText();
						} else if (text == 'ImpositionOfSentenceSuspended') {
							ImpositionOfSentenceSuspended = parser.getText();
						} else if (text == 'ProbationStatuses') {
							ProbationStatuses = new ProbationStatuses(parser);
						} else if (text == 'ProbationConditions') {
							ProbationConditions = arrayOfProbationConditions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CAProbationComponent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Vehicles {
		public Vehicle Vehicle {get;set;} 

		public Vehicles(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Vehicle') {
							Vehicle = new Vehicle(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Vehicles consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Vehicle {
		public String PlateNumber {get;set;} 
		public String PlateStateCode {get;set;} 
		public String PlateState {get;set;} 
		public String Commercial {get;set;} 
		public String HazMaterials {get;set;} 
		public String Inactive {get;set;} 

		public Vehicle(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PlateNumber') {
							PlateNumber = parser.getText();
						} else if (text == 'PlateStateCode') {
							PlateStateCode = parser.getText();
						} else if (text == 'PlateState') {
							PlateState = parser.getText();
						} else if (text == 'Commercial') {
							Commercial = parser.getText();
						} else if (text == 'HazMaterials') {
							HazMaterials = parser.getText();
						} else if (text == 'Inactive') {
							Inactive = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Vehicle consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Parties {
		public Party Party {get;set;} 

		public Parties(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Party') {
							Party = new Party(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Parties consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EyeColor {
		public String EyeColorCode {get;set;} 
		public String EyeColorDescription {get;set;} 

		public EyeColor(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'EyeColorCode') {
							EyeColorCode = parser.getText();
						} else if (text == 'EyeColorDescription') {
							EyeColorDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'EyeColor consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SentenceEvent {
		public String SentenceEventID {get;set;} 
		public String SentenceTypeCode {get;set;} 
		public String SentenceType {get;set;} 
		public String SentenceDate {get;set;} 
		public String JudicialOfficerCode {get;set;} 
		public String JudicialOfficer {get;set;} 
		public Sentence Sentence {get;set;} 

		public SentenceEvent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'SentenceEventID') {
							SentenceEventID = parser.getText();
						} else if (text == 'SentenceTypeCode') {
							SentenceTypeCode = parser.getText();
						} else if (text == 'SentenceType') {
							SentenceType = parser.getText();
						} else if (text == 'SentenceDate') {
							SentenceDate = parser.getText();
						} else if (text == 'JudicialOfficerCode') {
							JudicialOfficerCode = parser.getText();
						} else if (text == 'JudicialOfficer') {
							JudicialOfficer = parser.getText();
						} else if (text == 'Sentence') {
							Sentence = new Sentence(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'SentenceEvent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseInformation {
		public String CaseID {get;set;} 
		public String CaseNumber {get;set;} 
		public CaseActivities CaseActivities {get;set;} 
		public String CreatedDateTime {get;set;} 

		public CaseInformation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'CaseID') {
							CaseID = parser.getText();
						} else if (text == 'CaseNumber') {
							CaseNumber = parser.getText();
						} else if (text == 'CaseActivities') {
							CaseActivities = new CaseActivities(parser);
						} else if (text == 'CreatedDateTime') {
							CreatedDateTime = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CaseInformation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseFlags {
		public CaseFlag CaseFlag {get;set;} 

		public CaseFlags(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'CaseFlag') {
							CaseFlag = new CaseFlag(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CaseFlags consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseEvents {
		public String EventID {get;set;} 
		public String EventDate {get;set;} 
		public String EventCode {get;set;} 
		public String EventType {get;set;} 
		public String Comment {get;set;} 

		public CaseEvents(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'EventID') {
							EventID = parser.getText();
						} else if (text == 'EventDate') {
							EventDate = parser.getText();
						} else if (text == 'EventCode') {
							EventCode = parser.getText();
						} else if (text == 'EventType') {
							EventType = parser.getText();
						} else if (text == 'Comment') {
							Comment = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CaseEvents consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Plea {
		public String PleaID {get;set;} 
		public String PleaEventDate {get;set;} 
		public String ChargeID {get;set;} 
		public String ChargeNumber {get;set;} 
		public String OffenseHistoryID {get;set;} 
		public String PleaTypeCode {get;set;} 
		public String PleaType {get;set;} 

		public Plea(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PleaID') {
							PleaID = parser.getText();
						} else if (text == 'PleaEventDate') {
							PleaEventDate = parser.getText();
						} else if (text == 'ChargeID') {
							ChargeID = parser.getText();
						} else if (text == 'ChargeNumber') {
							ChargeNumber = parser.getText();
						} else if (text == 'OffenseHistoryID') {
							OffenseHistoryID = parser.getText();
						} else if (text == 'PleaTypeCode') {
							PleaTypeCode = parser.getText();
						} else if (text == 'PleaType') {
							PleaType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Plea consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sentence {
		public String SentenceID {get;set;} 
		public SentenceCharge SentenceCharge {get;set;} 
		public Details Details {get;set;} 

		public Sentence(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'SentenceID') {
							SentenceID = parser.getText();
						} else if (text == 'SentenceCharge') {
							SentenceCharge = new SentenceCharge(parser);
						} else if (text == 'Details') {
							Details = new Details(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Sentence consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Settings {
		public Setting Setting {get;set;} 

		public Settings(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Setting') {
							Setting = new Setting(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Settings consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Status {
		public String StatusCode {get;set;} 
		public String StatusType {get;set;} 
		public String StatusDate {get;set;} 

		public Status(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'StatusCode') {
							StatusCode = parser.getText();
						} else if (text == 'StatusType') {
							StatusType = parser.getText();
						} else if (text == 'StatusDate') {
							StatusDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Status consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Pleas {
		public Plea Plea {get;set;} 

		public Pleas(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Plea') {
							Plea = new Plea(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Pleas consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ArrestingAgency {
		public String ArrestDate {get;set;} 
		public String AgencyCode {get;set;} 
		public String Agency {get;set;} 
		public String ORI {get;set;} 
		public String ControlNumber {get;set;} 

		public ArrestingAgency(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ArrestDate') {
							ArrestDate = parser.getText();
						} else if (text == 'AgencyCode') {
							AgencyCode = parser.getText();
						} else if (text == 'Agency') {
							Agency = parser.getText();
						} else if (text == 'ORI') {
							ORI = parser.getText();
						} else if (text == 'ControlNumber') {
							ControlNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ArrestingAgency consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Setting {
		public String SettingID {get;set;} 
		public String HearingDate {get;set;} 
		public String StartTime {get;set;} 
		public String DepartmentCode {get;set;} 
		public String Department {get;set;} 
		public String JudicialOfficerCode {get;set;} 
		public String JudicialOfficer {get;set;} 
		public String HearingResultCode {get;set;} 
		public String HearingResult {get;set;} 
		public List<SettingResources> SettingResources {get;set;} 
		public List<PresentParties> PresentParties {get;set;} 

		public Setting(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'SettingID') {
							SettingID = parser.getText();
						} else if (text == 'HearingDate') {
							HearingDate = parser.getText();
						} else if (text == 'StartTime') {
							StartTime = parser.getText();
						} else if (text == 'DepartmentCode') {
							DepartmentCode = parser.getText();
						} else if (text == 'Department') {
							Department = parser.getText();
						} else if (text == 'JudicialOfficerCode') {
							JudicialOfficerCode = parser.getText();
						} else if (text == 'JudicialOfficer') {
							JudicialOfficer = parser.getText();
						} else if (text == 'HearingResultCode') {
							HearingResultCode = parser.getText();
						} else if (text == 'HearingResult') {
							HearingResult = parser.getText();
						} else if (text == 'SettingResources') {
							SettingResources = arrayOfSettingResources(parser);
						} else if (text == 'PresentParties') {
							PresentParties = arrayOfPresentParties(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Setting consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CACommentComponent {
		public String DispositionComponentInstanceID {get;set;} 
		public String Comment {get;set;} 

		public CACommentComponent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DispositionComponentInstanceID') {
							DispositionComponentInstanceID = parser.getText();
						} else if (text == 'Comment') {
							Comment = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CACommentComponent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StatisticalClosure {
		public String DispositionID {get;set;} 
		public String StatisticalClosureTypeCode {get;set;} 
		public String StatisticalClosureType {get;set;} 
		public String Date_Z {get;set;} // in json: Date

		public StatisticalClosure(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DispositionID') {
							DispositionID = parser.getText();
						} else if (text == 'StatisticalClosureTypeCode') {
							StatisticalClosureTypeCode = parser.getText();
						} else if (text == 'StatisticalClosureType') {
							StatisticalClosureType = parser.getText();
						} else if (text == 'Date') {
							Date_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StatisticalClosure consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseParties {
		public String PartyID {get;set;} 
		public String PartyNameFormatted {get;set;} 
		public String NameLast {get;set;} 
		public String ConnectionCode {get;set;} 
		public String Connection {get;set;} 
		public CasePartyAttorney CasePartyAttorney {get;set;} 
		public String NameFirst {get;set;} 
		public String NameMid {get;set;} 

		public CaseParties(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PartyID') {
							PartyID = parser.getText();
						} else if (text == 'PartyNameFormatted') {
							PartyNameFormatted = parser.getText();
						} else if (text == 'NameLast') {
							NameLast = parser.getText();
						} else if (text == 'ConnectionCode') {
							ConnectionCode = parser.getText();
						} else if (text == 'Connection') {
							Connection = parser.getText();
						} else if (text == 'CasePartyAttorney') {
							CasePartyAttorney = new CasePartyAttorney(parser);
						} else if (text == 'NameFirst') {
							NameFirst = parser.getText();
						} else if (text == 'NameMid') {
							NameMid = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CaseParties consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BondSetting {
		public String BondSettingID {get;set;} 
		public String PartyID {get;set;} 
		public String SettingGroupType {get;set;} 
		public String SettingDate {get;set;} 
		public String BondSettingTypeCode {get;set;} 
		public String BondSettingType {get;set;} 

		public BondSetting(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'BondSettingID') {
							BondSettingID = parser.getText();
						} else if (text == 'PartyID') {
							PartyID = parser.getText();
						} else if (text == 'SettingGroupType') {
							SettingGroupType = parser.getText();
						} else if (text == 'SettingDate') {
							SettingDate = parser.getText();
						} else if (text == 'BondSettingTypeCode') {
							BondSettingTypeCode = parser.getText();
						} else if (text == 'BondSettingType') {
							BondSettingType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'BondSetting consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PresentParties {
		public String PartyID {get;set;} 
		public String ConnectionCode {get;set;} 
		public String Connection {get;set;} 
		public String PartyNameFormatted {get;set;} 
		public String NameLast {get;set;} 
		public String NameFirst {get;set;} 
		public String NameMid {get;set;} 

		public PresentParties(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PartyID') {
							PartyID = parser.getText();
						} else if (text == 'ConnectionCode') {
							ConnectionCode = parser.getText();
						} else if (text == 'Connection') {
							Connection = parser.getText();
						} else if (text == 'PartyNameFormatted') {
							PartyNameFormatted = parser.getText();
						} else if (text == 'NameLast') {
							NameLast = parser.getText();
						} else if (text == 'NameFirst') {
							NameFirst = parser.getText();
						} else if (text == 'NameMid') {
							NameMid = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'PresentParties consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CasePartyAttorney {
		public String PartyID {get;set;} 
		public String LeadAttorney {get;set;} 
		public String BarNum {get;set;} 
		public String ConnectionCode {get;set;} 
		public String Connection {get;set;} 
		public String NameFirst {get;set;} 
		public String NameMiddle {get;set;} 
		public String NameLast {get;set;} 

		public CasePartyAttorney(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PartyID') {
							PartyID = parser.getText();
						} else if (text == 'LeadAttorney') {
							LeadAttorney = parser.getText();
						} else if (text == 'BarNum') {
							BarNum = parser.getText();
						} else if (text == 'ConnectionCode') {
							ConnectionCode = parser.getText();
						} else if (text == 'Connection') {
							Connection = parser.getText();
						} else if (text == 'NameFirst') {
							NameFirst = parser.getText();
						} else if (text == 'NameMiddle') {
							NameMiddle = parser.getText();
						} else if (text == 'NameLast') {
							NameLast = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CasePartyAttorney consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Details {
		public CAConfinementComponent CAConfinementComponent {get;set;} 
		public CAProbationComponent CAProbationComponent {get;set;} 
		public CACommentComponent CACommentComponent {get;set;} 

		public Details(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'CAConfinementComponent') {
							CAConfinementComponent = new CAConfinementComponent(parser);
						} else if (text == 'CAProbationComponent') {
							CAProbationComponent = new CAProbationComponent(parser);
						} else if (text == 'CACommentComponent') {
							CACommentComponent = new CACommentComponent(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseStatus {
		public String CaseStatusCode {get;set;} 
		public String CaseStatusType {get;set;} 
		public String Date_Z {get;set;} // in json: Date

		public CaseStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'CaseStatusCode') {
							CaseStatusCode = parser.getText();
						} else if (text == 'CaseStatusType') {
							CaseStatusType = parser.getText();
						} else if (text == 'Date') {
							Date_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CaseStatus consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TermDuration_Z {
		public String Years {get;set;} 

		public TermDuration_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Years') {
							Years = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TermDuration_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Disposition {
		public String DispositionID {get;set;} 
		public String DispositionEventDate {get;set;} 
		public String ChargeID {get;set;} 
		public String ChargeNumber {get;set;} 
		public String OffenseHistoryID {get;set;} 
		public String DispositionTypeCode {get;set;} 
		public String DispositionType {get;set;} 

		public Disposition(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DispositionID') {
							DispositionID = parser.getText();
						} else if (text == 'DispositionEventDate') {
							DispositionEventDate = parser.getText();
						} else if (text == 'ChargeID') {
							ChargeID = parser.getText();
						} else if (text == 'ChargeNumber') {
							ChargeNumber = parser.getText();
						} else if (text == 'OffenseHistoryID') {
							OffenseHistoryID = parser.getText();
						} else if (text == 'DispositionTypeCode') {
							DispositionTypeCode = parser.getText();
						} else if (text == 'DispositionType') {
							DispositionType = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Disposition consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BondSettings {
		public BondSetting BondSetting {get;set;} 

		public BondSettings(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'BondSetting') {
							BondSetting = new BondSetting(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'BondSettings consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TermDuration {
		public String Days {get;set;} 

		public TermDuration(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Days') {
							Days = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TermDuration consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SentenceEvents {
		public SentenceEvent SentenceEvent {get;set;} 

		public SentenceEvents(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'SentenceEvent') {
							SentenceEvent = new SentenceEvent(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'SentenceEvents consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CasePartyAttorney_Z {
		public String PartyID {get;set;} 
		public String LeadAttorney {get;set;} 
		public String BarNum {get;set;} 
		public String ConnectionCode {get;set;} 
		public String Connection {get;set;} 
		public String NameFirst {get;set;} 
		public String NameLast {get;set;} 

		public CasePartyAttorney_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PartyID') {
							PartyID = parser.getText();
						} else if (text == 'LeadAttorney') {
							LeadAttorney = parser.getText();
						} else if (text == 'BarNum') {
							BarNum = parser.getText();
						} else if (text == 'ConnectionCode') {
							ConnectionCode = parser.getText();
						} else if (text == 'Connection') {
							Connection = parser.getText();
						} else if (text == 'NameFirst') {
							NameFirst = parser.getText();
						} else if (text == 'NameLast') {
							NameLast = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CasePartyAttorney_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StatisticalClosures {
		public StatisticalClosure StatisticalClosure {get;set;} 

		public StatisticalClosures(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'StatisticalClosure') {
							StatisticalClosure = new StatisticalClosure(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'StatisticalClosures consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public CaseInformation CaseInformation {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'CaseInformation') {
						CaseInformation = new CaseInformation(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class CaseFlag {
		public String FlagCode {get;set;} 
		public String FlagDescription {get;set;} 

		public CaseFlag(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'FlagCode') {
							FlagCode = parser.getText();
						} else if (text == 'FlagDescription') {
							FlagDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CaseFlag consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Settings_Z {
		public Setting_Z Setting {get;set;} 

		public Settings_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Setting') {
							Setting = new Setting_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Settings_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Settings_Y {
		public Setting_Y Setting {get;set;} 

		public Settings_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Setting') {
							Setting = new Setting_Y(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Settings_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Setting_Y {
		public String SettingID {get;set;} 
		public String HearingDate {get;set;} 
		public String StartTime {get;set;} 
		public String DepartmentCode {get;set;} 
		public String Department {get;set;} 
		public String JudicialOfficerCode {get;set;} 
		public String JudicialOfficer {get;set;} 
		public String HearingResultCode {get;set;} 
		public String HearingResult {get;set;} 
		public List<SettingResources> SettingResources {get;set;} 
		public PresentParties_Z PresentParties {get;set;} 

		public Setting_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'SettingID') {
							SettingID = parser.getText();
						} else if (text == 'HearingDate') {
							HearingDate = parser.getText();
						} else if (text == 'StartTime') {
							StartTime = parser.getText();
						} else if (text == 'DepartmentCode') {
							DepartmentCode = parser.getText();
						} else if (text == 'Department') {
							Department = parser.getText();
						} else if (text == 'JudicialOfficerCode') {
							JudicialOfficerCode = parser.getText();
						} else if (text == 'JudicialOfficer') {
							JudicialOfficer = parser.getText();
						} else if (text == 'HearingResultCode') {
							HearingResultCode = parser.getText();
						} else if (text == 'HearingResult') {
							HearingResult = parser.getText();
						} else if (text == 'SettingResources') {
							SettingResources = arrayOfSettingResources(parser);
						} else if (text == 'PresentParties') {
							PresentParties = new PresentParties_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Setting_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Setting_Z {
		public String SettingID {get;set;} 
		public String HearingDate {get;set;} 
		public String StartTime {get;set;} 
		public String DepartmentCode {get;set;} 
		public String Department {get;set;} 
		public String JudicialOfficerCode {get;set;} 
		public String JudicialOfficer {get;set;} 
		public String HearingResultCode {get;set;} 
		public String HearingResult {get;set;} 
		public List<SettingResources> SettingResources {get;set;} 

		public Setting_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'SettingID') {
							SettingID = parser.getText();
						} else if (text == 'HearingDate') {
							HearingDate = parser.getText();
						} else if (text == 'StartTime') {
							StartTime = parser.getText();
						} else if (text == 'DepartmentCode') {
							DepartmentCode = parser.getText();
						} else if (text == 'Department') {
							Department = parser.getText();
						} else if (text == 'JudicialOfficerCode') {
							JudicialOfficerCode = parser.getText();
						} else if (text == 'JudicialOfficer') {
							JudicialOfficer = parser.getText();
						} else if (text == 'HearingResultCode') {
							HearingResultCode = parser.getText();
						} else if (text == 'HearingResult') {
							HearingResult = parser.getText();
						} else if (text == 'SettingResources') {
							SettingResources = arrayOfSettingResources(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Setting_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ProbationConditions {
		public String ConditionID {get;set;} 
		public String ConditionTypeCode {get;set;} 
		public String ConditionType {get;set;} 
		public String EffectiveDateStart {get;set;} 
		public Status Status {get;set;} 
		public String Comment {get;set;} 

		public ProbationConditions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ConditionID') {
							ConditionID = parser.getText();
						} else if (text == 'ConditionTypeCode') {
							ConditionTypeCode = parser.getText();
						} else if (text == 'ConditionType') {
							ConditionType = parser.getText();
						} else if (text == 'EffectiveDateStart') {
							EffectiveDateStart = parser.getText();
						} else if (text == 'Status') {
							Status = new Status(parser);
						} else if (text == 'Comment') {
							Comment = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ProbationConditions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Party {
		public String PartyID {get;set;} 
		public String ConnectionCode {get;set;} 
		public String Connection {get;set;} 
		public String NameTypeKey {get;set;} 
		public String NameTypeDesc {get;set;} 
		public String NameFirst {get;set;} 
		public String NameMiddle {get;set;} 
		public String NameLast {get;set;} 
		public AKAs AKAs {get;set;} 
		public String DateOfBirth {get;set;} 
		public String SONumber {get;set;} 
		public String HeightFeet {get;set;} 
		public String HeightInches {get;set;} 
		public String WeightPounds {get;set;} 
		public Gender Gender {get;set;} 
		public Race Race {get;set;} 
		public EyeColor EyeColor {get;set;} 
		public HairColor HairColor {get;set;} 
		public Address Address {get;set;} 
		public StateID StateID {get;set;} 
		public DriversLicense DriversLicense {get;set;} 
		public Vehicles Vehicles {get;set;} 

		public Party(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PartyID') {
							PartyID = parser.getText();
						} else if (text == 'ConnectionCode') {
							ConnectionCode = parser.getText();
						} else if (text == 'Connection') {
							Connection = parser.getText();
						} else if (text == 'NameTypeKey') {
							NameTypeKey = parser.getText();
						} else if (text == 'NameTypeDesc') {
							NameTypeDesc = parser.getText();
						} else if (text == 'NameFirst') {
							NameFirst = parser.getText();
						} else if (text == 'NameMiddle') {
							NameMiddle = parser.getText();
						} else if (text == 'NameLast') {
							NameLast = parser.getText();
						} else if (text == 'AKAs') {
							AKAs = new AKAs(parser);
						} else if (text == 'DateOfBirth') {
							DateOfBirth = parser.getText();
						} else if (text == 'SONumber') {
							SONumber = parser.getText();
						} else if (text == 'HeightFeet') {
							HeightFeet = parser.getText();
						} else if (text == 'HeightInches') {
							HeightInches = parser.getText();
						} else if (text == 'WeightPounds') {
							WeightPounds = parser.getText();
						} else if (text == 'Gender') {
							Gender = new Gender(parser);
						} else if (text == 'Race') {
							Race = new Race(parser);
						} else if (text == 'EyeColor') {
							EyeColor = new EyeColor(parser);
						} else if (text == 'HairColor') {
							HairColor = new HairColor(parser);
						} else if (text == 'Address') {
							Address = new Address(parser);
						} else if (text == 'StateID') {
							StateID = new StateID(parser);
						} else if (text == 'DriversLicense') {
							DriversLicense = new DriversLicense(parser);
						} else if (text == 'Vehicles') {
							Vehicles = new Vehicles(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Party consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AKA {
		public String NameLast {get;set;} 
		public String NameTypeKey {get;set;} 
		public String NameTypeDesc {get;set;} 
		public String CasePartyNameTypeKey {get;set;} 
		public String CasePartyNameTypeDesc {get;set;} 

		public AKA(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'NameLast') {
							NameLast = parser.getText();
						} else if (text == 'NameTypeKey') {
							NameTypeKey = parser.getText();
						} else if (text == 'NameTypeDesc') {
							NameTypeDesc = parser.getText();
						} else if (text == 'CasePartyNameTypeKey') {
							CasePartyNameTypeKey = parser.getText();
						} else if (text == 'CasePartyNameTypeDesc') {
							CasePartyNameTypeDesc = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AKA consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Race {
		public String RaceCode {get;set;} 
		public String RaceDescription {get;set;} 

		public Race(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'RaceCode') {
							RaceCode = parser.getText();
						} else if (text == 'RaceDescription') {
							RaceDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Race consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ProbationStatuses {
		public ProbationStatus ProbationStatus {get;set;} 

		public ProbationStatuses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ProbationStatus') {
							ProbationStatus = new ProbationStatus(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ProbationStatuses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseCrossReferences {
		public String CaseCrossReferenceTypeCode {get;set;} 
		public String CaseCrossReferenceType {get;set;} 
		public String CrossCaseNumber {get;set;} 

		public CaseCrossReferences(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'CaseCrossReferenceTypeCode') {
							CaseCrossReferenceTypeCode = parser.getText();
						} else if (text == 'CaseCrossReferenceType') {
							CaseCrossReferenceType = parser.getText();
						} else if (text == 'CrossCaseNumber') {
							CrossCaseNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CaseCrossReferences consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Charges {
		public Charge Charge {get;set;} 

		public Charges(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Charge') {
							Charge = new Charge(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Charges consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DriversLicense {
		public String DriversLicenseNumber {get;set;} 
		public String DriversLicenseStateCode {get;set;} 
		public String DriversLicenseState {get;set;} 

		public DriversLicense(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DriversLicenseNumber') {
							DriversLicenseNumber = parser.getText();
						} else if (text == 'DriversLicenseStateCode') {
							DriversLicenseStateCode = parser.getText();
						} else if (text == 'DriversLicenseState') {
							DriversLicenseState = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'DriversLicense consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ProbationStatus {
		public String ProbationStatusCollectionID {get;set;} 
		public String ProbationStatusCode {get;set;} 
		public String ProbationStatus {get;set;} 
		public String ProbationStatusDate {get;set;} 

		public ProbationStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ProbationStatusCollectionID') {
							ProbationStatusCollectionID = parser.getText();
						} else if (text == 'ProbationStatusCode') {
							ProbationStatusCode = parser.getText();
						} else if (text == 'ProbationStatus') {
							ProbationStatus = parser.getText();
						} else if (text == 'ProbationStatusDate') {
							ProbationStatusDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ProbationStatus consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AKAs {
		public AKA AKA {get;set;} 

		public AKAs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AKA') {
							AKA = new AKA(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'AKAs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StateID {
		public String StateIDNumber {get;set;} 
		public String StateIDCode {get;set;} 
		public String StateIDState {get;set;} 

		public StateID(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'StateIDNumber') {
							StateIDNumber = parser.getText();
						} else if (text == 'StateIDCode') {
							StateIDCode = parser.getText();
						} else if (text == 'StateIDState') {
							StateIDState = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StateID consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Charge {
		public String ChargeID {get;set;} 
		public String ChargeOffenseDate {get;set;} 
		public String ChargeFiledDate {get;set;} 
		public ArrestingAgency ArrestingAgency {get;set;} 
		public BookingAgency BookingAgency {get;set;} 
		public List<ChargeStages> ChargeStages {get;set;} 

		public Charge(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ChargeID') {
							ChargeID = parser.getText();
						} else if (text == 'ChargeOffenseDate') {
							ChargeOffenseDate = parser.getText();
						} else if (text == 'ChargeFiledDate') {
							ChargeFiledDate = parser.getText();
						} else if (text == 'ArrestingAgency') {
							ArrestingAgency = new ArrestingAgency(parser);
						} else if (text == 'BookingAgency') {
							BookingAgency = new BookingAgency(parser);
						} else if (text == 'ChargeStages') {
							ChargeStages = arrayOfChargeStages(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Charge consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PresentParties_Z {
		public PresentParties PresentParty {get;set;} 

		public PresentParties_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PresentParty') {
							PresentParty = new PresentParties(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PresentParties_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class HairColor {
		public String HairColorCode {get;set;} 
		public String HairColorDescription {get;set;} 

		public HairColor(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'HairColorCode') {
							HairColorCode = parser.getText();
						} else if (text == 'HairColorDescription') {
							HairColorDescription = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'HairColor consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SettingResources {
		public String ResourceType {get;set;} 
		public String ResourceCode {get;set;} 
		public String Resource {get;set;} 

		public SettingResources(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ResourceType') {
							ResourceType = parser.getText();
						} else if (text == 'ResourceCode') {
							ResourceCode = parser.getText();
						} else if (text == 'Resource') {
							Resource = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SettingResources consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Hearings {
		public String HearingID {get;set;} 
		public String HearingTypeCode {get;set;} 
		public String HearingType {get;set;} 
		public Settings Settings {get;set;} 

		public Hearings(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'HearingID') {
							HearingID = parser.getText();
						} else if (text == 'HearingTypeCode') {
							HearingTypeCode = parser.getText();
						} else if (text == 'HearingType') {
							HearingType = parser.getText();
						} else if (text == 'Settings') {
							Settings = new Settings(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Hearings consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CAConfinementComponent {
		public String DispositionComponentInstanceID {get;set;} 
		public String TypeCode {get;set;} 
		public String Type {get;set;} 
		public String FacilityCode {get;set;} 
		public String Facility {get;set;} 
		public String TermTypeCode {get;set;} 
		public String TermTypeDescription {get;set;} 
		public TermDuration TermDuration {get;set;} 
		public TermDuration CreditForTimeServedDuration {get;set;} 
		public TermDuration ConductCreditDuration {get;set;} 

		public CAConfinementComponent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'DispositionComponentInstanceID') {
							DispositionComponentInstanceID = parser.getText();
						} else if (text == 'TypeCode') {
							TypeCode = parser.getText();
						} else if (text == 'Type') {
							Type = parser.getText();
						} else if (text == 'FacilityCode') {
							FacilityCode = parser.getText();
						} else if (text == 'Facility') {
							Facility = parser.getText();
						} else if (text == 'TermTypeCode') {
							TermTypeCode = parser.getText();
						} else if (text == 'TermTypeDescription') {
							TermTypeDescription = parser.getText();
						} else if (text == 'TermDuration') {
							TermDuration = new TermDuration(parser);
						} else if (text == 'CreditForTimeServedDuration') {
							CreditForTimeServedDuration = new TermDuration(parser);
						} else if (text == 'ConductCreditDuration') {
							ConductCreditDuration = new TermDuration(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CAConfinementComponent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BookingAgency {
		public String ControlNumber {get;set;} 

		public BookingAgency(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ControlNumber') {
							ControlNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'BookingAgency consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CaseActivities {
		public String CaseTypeCode {get;set;} 
		public String CaseType {get;set;} 
		public String CaseTitle {get;set;} 
		public String FiledDate {get;set;} 
		public String NodeID {get;set;} 
		public String CourtName {get;set;} 
		public String JudicialOfficerCode {get;set;} 
		public String JudicialOfficer {get;set;} 
		public CaseFlags CaseFlags {get;set;} 
		public CaseStatus CaseStatus {get;set;} 
		public List<CaseCrossReferences> CaseCrossReferences {get;set;} 
		public Parties Parties {get;set;} 
		public List<CaseParties> CaseParties {get;set;} 
		public Charges Charges {get;set;} 
		public List<CaseEvents> CaseEvents {get;set;} 
		public List<Hearings> Hearings {get;set;} 
		public Pleas Pleas {get;set;} 
		public BondSettings BondSettings {get;set;} 
		public StatisticalClosures StatisticalClosures {get;set;} 
		public Dispositions Dispositions {get;set;} 
		public SentenceEvents SentenceEvents {get;set;} 

		public CaseActivities(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'CaseTypeCode') {
							CaseTypeCode = parser.getText();
						} else if (text == 'CaseType') {
							CaseType = parser.getText();
						} else if (text == 'CaseTitle') {
							CaseTitle = parser.getText();
						} else if (text == 'FiledDate') {
							FiledDate = parser.getText();
						} else if (text == 'NodeID') {
							NodeID = parser.getText();
						} else if (text == 'CourtName') {
							CourtName = parser.getText();
						} else if (text == 'JudicialOfficerCode') {
							JudicialOfficerCode = parser.getText();
						} else if (text == 'JudicialOfficer') {
							JudicialOfficer = parser.getText();
						} else if (text == 'CaseFlags') {
							CaseFlags = new CaseFlags(parser);
						} else if (text == 'CaseStatus') {
							CaseStatus = new CaseStatus(parser);
						} else if (text == 'CaseCrossReferences') {
							CaseCrossReferences = arrayOfCaseCrossReferences(parser);
						} else if (text == 'Parties') {
							Parties = new Parties(parser);
						} else if (text == 'CaseParties') {
							CaseParties = arrayOfCaseParties(parser);
						} else if (text == 'Charges') {
							Charges = new Charges(parser);
						} else if (text == 'CaseEvents') {
							CaseEvents = arrayOfCaseEvents(parser);
						} else if (text == 'Hearings') {
							Hearings = arrayOfHearings(parser);
						} else if (text == 'Pleas') {
							Pleas = new Pleas(parser);
						} else if (text == 'BondSettings') {
							BondSettings = new BondSettings(parser);
						} else if (text == 'StatisticalClosures') {
							StatisticalClosures = new StatisticalClosures(parser);
						} else if (text == 'Dispositions') {
							Dispositions = new Dispositions(parser);
						} else if (text == 'SentenceEvents') {
							SentenceEvents = new SentenceEvents(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CaseActivities consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ChargeStages {
		public String ChargeNumber {get;set;} 
		public String OffenseHistoryID {get;set;} 
		public String OffenseStageID {get;set;} 
		public String OffenseStage {get;set;} 
		public String JurisdictionCode {get;set;} 
		public String Jurisdiction {get;set;} 
		public String StatuteNumber {get;set;} 
		public String StatuteCode {get;set;} 
		public String StatuteDescription {get;set;} 
		public String StatuteDegreeCode {get;set;} 
		public String StatuteDegree {get;set;} 
		public String LiteralID {get;set;} 
		public String Deleted {get;set;} 

		public ChargeStages(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ChargeNumber') {
							ChargeNumber = parser.getText();
						} else if (text == 'OffenseHistoryID') {
							OffenseHistoryID = parser.getText();
						} else if (text == 'OffenseStageID') {
							OffenseStageID = parser.getText();
						} else if (text == 'OffenseStage') {
							OffenseStage = parser.getText();
						} else if (text == 'JurisdictionCode') {
							JurisdictionCode = parser.getText();
						} else if (text == 'Jurisdiction') {
							Jurisdiction = parser.getText();
						} else if (text == 'StatuteNumber') {
							StatuteNumber = parser.getText();
						} else if (text == 'StatuteCode') {
							StatuteCode = parser.getText();
						} else if (text == 'StatuteDescription') {
							StatuteDescription = parser.getText();
						} else if (text == 'StatuteDegreeCode') {
							StatuteDegreeCode = parser.getText();
						} else if (text == 'StatuteDegree') {
							StatuteDegree = parser.getText();
						} else if (text == 'LiteralID') {
							LiteralID = parser.getText();
						} else if (text == 'Deleted') {
							Deleted = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ChargeStages consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<PresentParties> arrayOfPresentParties(System.JSONParser p) {
        List<PresentParties> res = new List<PresentParties>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new PresentParties(p));
        }
        return res;
    }




























    private static List<CaseParties> arrayOfCaseParties(System.JSONParser p) {
        List<CaseParties> res = new List<CaseParties>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CaseParties(p));
        }
        return res;
    }











    private static List<CaseCrossReferences> arrayOfCaseCrossReferences(System.JSONParser p) {
        List<CaseCrossReferences> res = new List<CaseCrossReferences>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CaseCrossReferences(p));
        }
        return res;
    }










    private static List<Hearings> arrayOfHearings(System.JSONParser p) {
        List<Hearings> res = new List<Hearings>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Hearings(p));
        }
        return res;
    }



    private static List<SettingResources> arrayOfSettingResources(System.JSONParser p) {
        List<SettingResources> res = new List<SettingResources>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new SettingResources(p));
        }
        return res;
    }














    private static List<ChargeStages> arrayOfChargeStages(System.JSONParser p) {
        List<ChargeStages> res = new List<ChargeStages>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ChargeStages(p));
        }
        return res;
    }




    private static List<CaseEvents> arrayOfCaseEvents(System.JSONParser p) {
        List<CaseEvents> res = new List<CaseEvents>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CaseEvents(p));
        }
        return res;
    }





    private static List<ProbationConditions> arrayOfProbationConditions(System.JSONParser p) {
        List<ProbationConditions> res = new List<ProbationConditions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ProbationConditions(p));
        }
        return res;
    }








}